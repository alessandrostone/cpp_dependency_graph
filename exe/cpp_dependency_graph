#!/usr/bin/env ruby

#--
# Copyright (c) 2018 Shreyas Balakrishna

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#++

require 'docopt'
require 'ostruct'
require 'cpp_dependency_graph'

include CppDependencyGraph

require 'docopt'

doc = <<DOCOPT
  Usage:
    #{__FILE__} generate_graph --root_dir <argument> [--component <component> [--class]] --output_file <file> [--output_format <format>]
    #{__FILE__} cyclic_dependencies --root_dir <argument> [--component <component> [--class] --output_file <file>]
    #{__FILE__} -h | --help | -v | --version

  Options:
    -h --help                   show this help message and exit
    -v --version                show version and exit
    -r --root_dir dir           top level root directory of C/C++ project
    -c --component component    component to analyse and generate graph for (case sensitive!)
    --class                     generate internal class diagram for specified component
    -o --output_file file       name of output graph file to be generated
    --output_format format      format of output file (one of dot or html)
DOCOPT

begin
  args = Docopt.docopt(doc)

  if (args['--version'])
    puts VERSION
    Kernel.exit(0)
  end

  unless File.directory?(args['--root_dir'])
    puts('Not a valid project source directory')
    Kernel.exit(1)
  end

  options = OpenStruct.new
  options.project_dir = args['--root_dir'].gsub(/\\/,'/')
  options.component = args['--component']
  options.class_diagram = args['--class']
  options.output_file = args['--output_file']

  if args['generate_graph']
    if options.component
      if options.class_diagram
        generate_component_class_graph(options.project_dir, options.component, options.output_file)
      else
        generate_component_graph(options.project_dir, options.component, options.output_file)
      end
    else
      generate_project_graph(options.project_dir, options.output_file)
    end
  elsif args['cyclic_dependencies']
    output_cyclic_dependencies(options.project_dir)
  end
rescue Docopt::Exit => e
  puts e.message
end

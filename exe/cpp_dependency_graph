#!/usr/bin/env ruby

#--
# Copyright (c) 2018 Shreyas Balakrishna

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#++

require 'optparse'
require 'ostruct'
require 'cpp_dependency_graph'

include CppDependencyGraph

options = OpenStruct.new
optparse = OptionParser.new do |opts|
  opts.banner = 'Usage: cpp_dependency_graph [options]'

  opts.on('-r dir', '--root dir', 'top level root directory of C/C++ project') do |dir|
    options.project_dir = dir.gsub(/\\+/, '/')
  end

  opts.on('-c component', '--component', 'component to analyse and generate graph for') do |component|
    options.component = component
  end

  opts.on('-o file', '--output file', 'output dot file to be generated') do |file|
    options.output_file = file
  end

  opts.on('-h', '--help', 'Prints this help') do
    puts opts
    exit
  end
end

begin
  optparse.parse!
  mandatory = [:project_dir, :output_file]
  missing = mandatory.select { |param| options[param].nil? }
  raise OptionParser::MissingArgument.new(missing.join(', ')) unless missing.empty?
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
  puts $ERROR_INFO.to_s
  puts optparse
  exit
end

unless File.directory?(options.project_dir)
  puts('Not a valid project source directory')
  Kernel.exit(1)
end

generate(options)
